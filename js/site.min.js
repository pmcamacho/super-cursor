/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _superCursor = __webpack_require__(1);

	var SuperCursor = _interopRequireWildcard(_superCursor);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	SuperCursor.init({
	  spCallbacks: {
	    processSpClassChange: processSpClassChange
	  }
	});

	var spProgress = function () {
	  var spProgress = document.createElement('div');
	  spProgress.setAttribute('id', 'sp-progress');
	  spProgress.classList.add('dot-spinner');
	  for (var i = 0; i < 8; i++) {
	    var span = document.createElement('span');
	    span.classList.add('dot');
	    span.classList.add('dot' + (i + 1));
	    spProgress.appendChild(span);
	  }
	  return spProgress;
	}();

	var spDefault = function () {
	  var spPointer = document.createElement('div');
	  spPointer.setAttribute('id', 'sp-default');
	  spPointer.classList.add('sp-default-cursor');
	  return spPointer;
	}();

	var spPointer = function () {
	  var spPointer = document.createElement('div');
	  spPointer.setAttribute('id', 'sp-pointer');
	  spPointer.classList.add('sp-pointer-cursor');
	  return spPointer;
	}();

	var spText = function () {
	  var spText = document.createElement('div');
	  spText.setAttribute('id', 'sp-text');
	  spText.classList.add('sp-text-cursor');
	  return spText;
	}();

	var spWidgetText = function () {
	  var spWidgetText = document.createElement('div');
	  spWidgetText.setAttribute('id', 'sp-widget');
	  spWidgetText.classList.add('sp-widget-text');
	  var message = 'Your imagination is the limit!';
	  var messageWrapper = document.createElement('span');
	  for (var i = 0; i < message.length; i++) {
	    var span = document.createElement('span');
	    span.classList.add('char' + (i + 1));
	    span.innerHTML = message.charAt(i);
	    messageWrapper.appendChild(span);
	  }
	  spWidgetText.appendChild(messageWrapper);
	  return spWidgetText;
	}();

	function processSpClassChange(spClass) {
	  switch (spClass) {
	    case 'sp-fallback':
	      return spDefault;

	    case 'sp-default':
	      return spDefault;

	    case 'sp-pointer':
	      return spPointer;

	    case 'sp-progress':
	      return spProgress;

	    case 'sp-text':
	      return spText;

	    case 'sp-widget':
	      return spWidgetText;

	  }
	}

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.init = undefined;

	var _superCursorPosition = __webpack_require__(2);

	var SuperCursorPosition = _interopRequireWildcard(_superCursorPosition);

	var _superCursorUnderneath = __webpack_require__(3);

	var SuperCursorUnderneath = _interopRequireWildcard(_superCursorUnderneath);

	var _superCursorAnimation = __webpack_require__(4);

	var SuperCursorAnimation = _interopRequireWildcard(_superCursorAnimation);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	var spCallbacks;
	var lastSpClass;
	var spBackCursor;
	var spBackCursorAnim;

	function init(config) {
	  initMouse();
	  initSpHtml();
	  initSpHtmlAnim();
	  initCallbacks(config.spCallbacks);

	  SuperCursorPosition.init();
	  SuperCursorUnderneath.init(processUnderneathCssClasses);
	  SuperCursorAnimation.init();
	}

	function initSpHtml() {
	  spBackCursor = document.createElement('div');
	  spBackCursor.setAttribute('id', 'sp-back-cursor');
	  spBackCursor.classList.add('pointer-move');
	  document.getElementsByTagName('body')[0].appendChild(spBackCursor);
	}

	function initSpHtmlAnim() {
	  spBackCursorAnim = document.createElement('div');
	  spBackCursorAnim.setAttribute('id', 'sp-pointer-back-anim');
	  spBackCursorAnim.classList.add('pointer-background');
	  spBackCursorAnim.classList.add('invisible');
	  var div = document.createElement('div');
	  div.setAttribute('id', 'pointer-anim');
	  spBackCursorAnim.appendChild(div);
	  document.getElementsByTagName('body')[0].appendChild(spBackCursorAnim);
	}

	function initMouse() {
	  var html = document.getElementsByTagName('html')[0];

	  html.addEventListener('mouseenter', function (event) {
	    var sp = document.getElementById('sp-back-cursor');
	    if (sp !== null) {
	      sp.classList.remove('invisible');
	      sp.classList.add('visible');
	    }
	  });

	  html.addEventListener('mouseleave', function (event) {
	    var sp = document.getElementById('sp-back-cursor');
	    if (sp !== null) {
	      sp.classList.remove('visible');
	      sp.classList.add('invisible');
	    }
	  });
	}

	function initCallbacks(cbs) {
	  spCallbacks = cbs;
	}

	function processUnderneathCssClasses(spCls) {
	  if (spCls !== lastSpClass) {
	    lastSpClass = spCls;
	    var spCursorHtml = spCallbacks.processSpClassChange(spCls);
	    changeSpCursor(spCursorHtml);
	  }
	}

	function changeSpCursor(spCursorHtml) {
	  var oldTop = spBackCursor.style.top.substring(0, spBackCursor.style.top.length - 2); // remove px from top
	  var oldLeft = spBackCursor.style.left.substring(0, spBackCursor.style.left.length - 2);
	  var oldWidth = spBackCursor.offsetWidth;
	  var oldHeight = spBackCursor.offsetHeight;
	  spCursorHtml.style.visibility = 'hidden';
	  spBackCursor.innerHTML = '';
	  spBackCursor.appendChild(spCursorHtml);
	  var width = spCursorHtml.offsetWidth;
	  var height = spCursorHtml.offsetHeight;
	  var newTop = oldTop + oldHeight / 2 - height / 2;
	  var newLeft = oldLeft + oldWidth / 2 - width / 2;
	  spBackCursor.style.top = newTop + 'px';
	  spBackCursor.style.left = newLeft + 'px';
	  spCursorHtml.style.visibility = '';
	}

	exports.init = init;

/***/ },
/* 2 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var positionX;
	var positionY;

	var positionVX;
	var positionVY;

	var lastScrollX = 0;
	var lastScrollY = 0;

	function init() {
	  initEventListeners();
	}

	function dispose() {}

	function initEventListeners() {
	  window.addEventListener('mousemove', function (event) {
	    updatePointerCoordinates(event.pageX, event.pageY, event.clientX, event.clientY);
	  });

	  window.addEventListener('scroll', function (event) {
	    var scrollX = window.scrollX;
	    var scrollY = window.scrollY;

	    if (scrollX !== lastScrollX) {
	      if (scrollX > lastScrollX) {
	        positionX = positionX + (scrollX - lastScrollX);
	      } else {
	        positionX = positionX + (scrollX - lastScrollX);
	      }
	      lastScrollX = scrollX;
	    }
	    if (scrollY !== lastScrollY) {
	      if (scrollY > lastScrollY) {
	        positionY = positionY + (scrollY - lastScrollY);
	      } else {
	        positionY = positionY + (scrollY - lastScrollY);
	      }
	      lastScrollY = scrollY;
	    }
	    updatePointerCoordinates(positionX, positionY, positionVX, positionVY);
	  });
	}

	function updatePointerCoordinates(x, y, vx, vy) {
	  positionX = x;
	  positionY = y;
	  positionVX = vx;
	  positionVY = vy;
	  processPointerMove(x, y);
	}

	function getPointerPosition() {
	  return { x: positionX, y: positionY };
	}

	function getPointerPositionInViewPort() {
	  return { vx: positionVX, vy: positionVY };
	}

	function processPointerMove(x, y) {
	  if (x !== undefined && y !== undefined && !isNaN(x) && !isNaN(x)) {
	    move(x, y);
	  }
	}

	function move(x, y) {
	  var pointer = document.getElementById('sp-back-cursor');
	  var top = y - pointer.clientHeight / 2;
	  var left = x - pointer.clientWidth / 2;
	  pointer.style.top = top + 'px';
	  pointer.style.left = left + 'px';
	}

	exports.init = init;
	exports.dispose = dispose;
	exports.getPointerPosition = getPointerPosition;
	exports.getPointerPositionInViewPort = getPointerPositionInViewPort;

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.dispose = exports.init = undefined;

	var _superCursorPosition = __webpack_require__(2);

	var SuperCursorPosition = _interopRequireWildcard(_superCursorPosition);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	var callback;

	function init(cb) {
	  callback = cb;
	  initEventListeners();
	}

	function dispose() {}

	function initEventListeners() {
	  window.addEventListener('mousemove', function (event) {
	    updateUnderneathClasses(SuperCursorPosition.getPointerPositionInViewPort().vx, SuperCursorPosition.getPointerPositionInViewPort().vy);
	  });
	  window.addEventListener('scroll', function (event) {
	    updateUnderneathClasses(SuperCursorPosition.getPointerPositionInViewPort().vx, SuperCursorPosition.getPointerPositionInViewPort().vy);
	  });
	}

	function updateUnderneathClasses(x, y) {
	  var element = document.elementFromPoint(x, y);

	  var classes = {};
	  var targetClasses = element.classList;
	  if (targetClasses !== undefined) {
	    classes.node = [];
	    targetClasses.forEach(function (cls) {
	      classes.node.push(cls);
	    });
	  }

	  var parent = element.parentNode;
	  var i = 0;
	  while (parent !== null && parent !== undefined) {
	    // && parent !== document.body ?!
	    var _targetClasses = parent.classList;
	    if (_targetClasses !== undefined) {
	      classes['parent' + i] = [];
	      _targetClasses.forEach(function (cls) {
	        classes['parent' + i].push(cls);
	      });
	    }
	    parent = parent.parentNode;
	    i++;
	  }
	  var spClass = findFirstSuperPointerClasses(classes);
	  callback(spClass[0] || 'sp-fallback');
	}

	function findFirstSuperPointerClasses(classes) {
	  var regex = /sp\-(?:[\x01-\x08\x0B\f\x0E-\x1F!-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+/;
	  var classesArray = Object.keys(classes).map(function (value, index, array) {
	    return classes[value];
	  });

	  var arrayStrings = classesArray.map(function (value, index, array) {
	    return value.join(' ');
	  });

	  var m = void 0;
	  var sp = [];
	  arrayStrings.forEach(function (value, index, array) {
	    m = regex.exec(value);
	    if (m !== null) {
	      m.forEach(function (match, groupIndex) {
	        sp.push(match);
	      });
	    }
	  });
	  return sp;
	}

	exports.init = init;
	exports.dispose = dispose;

/***/ },
/* 4 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var anim = false;
	var animId;

	function init() {
	  window.addEventListener('click', function (event) {
	    var x = event.pageX;
	    var y = event.pageY;
	    click(x, y);
	  });
	}

	function initAnim(x, y) {
	  anim = true;
	  var pointer = document.getElementById('sp-pointer-back-anim');
	  var pointerAnim = document.getElementById('pointer-anim');

	  pointer.classList.remove('invisible');
	  pointer.classList.add('visible');
	  pointerAnim.classList.add('pointer');

	  var top = y - pointer.clientHeight / 2;
	  var left = x - pointer.clientWidth / 2;
	  pointer.style.top = top + 'px';
	  pointer.style.left = left + 'px';

	  animId = setTimeout(function () {
	    pointer.classList.remove('visible');
	    pointer.classList.add('invisible');
	    pointerAnim.classList.remove('pointer');
	    anim = false;
	  }, 1000);
	}

	function reInitAnim(x, y) {
	  var pointer = document.getElementById('sp-pointer-back-anim');
	  var pointerAnim = document.getElementById('pointer-anim');
	  pointer.classList.remove('visible');
	  pointer.classList.add('invisible');
	  pointerAnim.classList.remove('pointer');
	  clearTimeout(animId);
	  setTimeout(function () {
	    initAnim(x, y);
	  }, 100);
	}

	function click(x, y) {
	  if (anim) {
	    reInitAnim(x, y);
	  } else {
	    initAnim(x, y);
	    anim = true;
	  }
	}

	exports.init = init;

/***/ }
/******/ ]);